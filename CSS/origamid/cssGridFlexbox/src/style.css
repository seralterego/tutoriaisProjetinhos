body, ul, li, p {
  margin: 0px;
  padding: 0px;
  list-style: none;
  font-size: 1.2rem;
  font-family: Arial, Helvetica, sans-serif;
}

body {
  margin-bottom: 100px;
}

a {
  text-decoration: none;
  color: white;
}

h1 {
  text-align: center;
  margin-top: 100px;
}

img {
  max-width: 100%;
  display: block;
}

header {
  background: #1d1e20;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
}

.menu {
  display: flex;
}

.menu li {
  margin-left: 10px;
}

.menu a {
  display: block;
  padding: 10px;
  background: tomato;
}

/* /////////////////////////////////////////////////////// */
/* CSS FLEXBOX */
.flex {
  display: flex;
  flex-wrap: wrap;
  max-width: 800px;
  margin: 0 auto;
}

.flex > div {
  flex: 1 1 200px; /* o primeiro 1 faz com que o elemento se expanda; o segundo 1, é o flex-shrink, que faz com que ele retraia e o 200px é o valor minímo. Caso não alcance, ele irá quebrar. */
  margin: 10px;
}

/* /////////////////////////////////////////////////////// */
/* CSS GRID 1 */
.grid1 {
  display: grid;
  grid-template-columns: repeat(3, 1fr)/* 1fr 1fr 1fr */; /* aqui, o fr indica unidade de fração, e nesse caso, estamos dividindo 100 em 3 frações (33,3%). Como os valores são repetidos, utilizamos com o repeat primeiro com a quantidade de vezes que iremos repetir o valor e em seguida, indicando qual o valor que será repetido, para ficar mais prático o código  */
  max-width: 800px;
  padding: 10px; /* como no flexbox temos uma margem de 10px nas bordas das imagens, incluimos um padding para que tanto no mobile quanto no responsivo, fiquem todos os itens alinhados */
  margin: 0 auto;
  grid-gap: 20px; /* ao invés de usarmos margin para separar os elementos, o grid conta com esse atributo, que já faz esse trabalho  */
}

/* Seguindo o layout de exemplo que foi dado, podemos estilizar os outros elementos de diversas formas, mas a mais prática, é chamando os elementos filhos através da classe pai. Sendo assim...  */

.grid1 > div:nth-child(n + 4) {
  /* o nth-child irá atuar somente no filho que está sendo indicado entre parênteses. Mas como ele aceita algumas fórmulas matemáticas, indicamos n (que é o elemento referenciado - no caso a div - e somamos 4. Assim, ele irá estilizar de maneira diferente somente à partir do 4ª elemento filho */
  display: grid;
  grid-template-columns: repeat(2, 1fr) /* 1fr 1fr */;
  grid-gap: 10px;
  align-items: center;
  background: blue;
}

/* Com o grid, conseguimos reposicionar elementos da maneira que para atender ao nosso layout proposto se fazer muitos malabarismos com a estrutura HTML e no CSS. Dessa maneira, reposicionamos o anuncio do nosso layout para a primeira coluna com o "grid-colun" e pedimos que ele tome as linhas 2 a 5 com o grid-row */

.grid1 > div.anuncio {
  grid-column: 1;
  grid-row: 2 / 5;
  display: block;
  border-top: 10px solid tomato;
}

@media (max-width: 600px) {
  .grid1 {
    grid-template-columns: repeat(2, 1fr);
  }
  .grid1 > div:nth-child(n + 4) {
    display: block;
  }

  .grid1 > div.anuncio {
    grid-column: auto;
    grid-row: auto;
    order: -1;
    display: block
    ;
  }
}

/* /////////////////////////////////////////////////////// */
/* CSS GRID 2 */
.grid2 {
  display: grid;
  grid-template-columns: 1fr 200px;
  grid-gap: 20px;
  max-width: 800px;
  padding: 10px;
  margin: 0 auto;
}

.sidebar > div {
  margin-bottom: 10px;
}

@media (max-width: 600px) {
  .grid2 {
    grid-template-columns: 1fr;
  }
  .sidebar {
    display: flex;
    overflow: scroll;
  }
  .sidebar > div {
    flex: 1 0 200px;
    margin: 0 10px;
  }
}

/* /////////////////////////////////////////////////////// */
/* CSS GRID 3 */
.grid3 {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-gap: 20px;
  max-width: 800px;
  padding: 10px;
  margin: 0 auto;
}

.grid3-item:nth-child(1) {
  grid-row: 1 / 3;
}

.grid3-item {
  display: grid;
}

.grid3-item img {
  grid-column: 1;
  grid-row: 1/3;
  align-self: end;
}

.grid3-item p {
  background: rgba(0, 0, 0, 0.6);
  padding: 10px;
  color: white;
  grid-column: 1;
  grid-row: 2;
  align-self: end;
}